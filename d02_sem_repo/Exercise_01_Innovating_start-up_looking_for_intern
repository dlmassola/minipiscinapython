Exercise 01 Innovating start-up looking for intern. 10 years exp. required.

    Your Intern class is present and can be instantiated with or without
    name set in parameter.

    The use of print() to display an instance allows to display the intance's
    "Name" attribute (the "name" set in parameter when instantiating or the
    default value).

    A Coffee class is present in the scope of the Intern class.The str()
    method is defined in the Coffee class as to returning "This is the worst
    coffee you ever tasted.".

    The work() method of the Intern class is present and raises an exception
    with the "I'm an intern, I can't do that..." text. The used type is the
    basic exception (Exception)

    The make_coffee() method is implemented in the Intern class and returns
    an instance of the Coffee class implemented in the scope of the Intern
    class (return self.Coffee()).

    Using print() on the return of the make_coffee() method (hence, an
    instance of the Intern.Coffee class) displays the return of the
    str() method of the Intern.Coffee class intance, that is "This
    is the worst coffee you ever tasted."

    The exception raised by calling the work() method is caught by a bloc
    try/except.

The exercise is considered invalid if one of the requirements is not
perfectly met.

ex02: 5 classes 1 cup.

    Each instance of the HotBeverage class or one of its derived classes
    is displayed the proper way:

    name : <name>
    price : <price limited to a two decimal point.>
    description : <description>

    The displayed informations for each instance of each class match the
    informations required by the subject.

    The content of each daughter class must be explicitly coded only if it's
    different from the mother class.
    So if a price, name, or class class description is excplicitly rewritten
    in the daughter class whereas the included informations is identical to
    the one inherited from the mother class, the exercice is not considered
    valid.

The exercise is considered invalid if one of the requirements is not
perfectly met.

ex03: Glorious coffee machine!

    An EmptyCup class inheriting the HotBeverage is present in the scope of
    the CoffeeMachine class and the informations (description, price and
    name) match the informations provided with the subject.

    The CoffeeMachine class can be instantiated and the instance has a serve()
    method that takes in parameter a HotBeverage class or derived and a 50%
    chance of returning the instance of the class set as parameter, or 50%
    chance of returning an EmptyCUp instance. Make sure the return is random
    and required probabilities are met.

    The CoffeeMachine class has a builder.

    A BrokenMachineException class inheriting the Exception class also is
    implemented in the scope of the CoffeeMachine class. The message "This
    coffee machine has to be repaired." is defined in the builder.

    After calling the serve() method 10 times, a new call raises the
    CoffeeMachine.BrokenMachineException exception. Using print() on this
    expression allows the display of the message: "This coffee machine has
    to be repaired.".

    After calling the repair() method, the serve() method can be called
    10 times again befor the machine "breaks down" again and raises the
    exception for each new call.

    Each exception raising is properly managed (= caught with a bloc try/catch)
    in your tests.

The exercise is considered invalid if one of the requirements is not
perfectly met.

Ex04: A basic class ft. RMS

    The test file in the appendix is running properly.

    The required structure in the subject is properly replicated and displayed
    in the tests.

The exercise is considered invalid if one of the requirements is not
perfectly met.

ex05: Create your own elements.

    The required classes are present and inherit all the Elem in the previous
    exercise. They're all functional.

    print(Html([Head(), Body()])) display:
    <html>
    <head></head>
    <body></body>
    </html>

    The structure required in the subject est properly replicated and displayed
    WITHOUT USING THE Elem CLASS.

The exercise is considered invalid if one of the requirements is not
perfectly met.

ex06: Validation.

    The Page class is present.

    print(Page(Html([Head(), Body()]))) displays:
    <!doctype html>
    <html>
    <head></head>
    <body></body>
    </html>

    Page(Html([Head(), Body()])).is_valid() returns False.

    Page(Html([Head(Title(Text('title'))), Body()])).is_valid() returns True.

    Page(Html([Head(Title(Text('title'))), Body(Li())])).is_valid()
    returns False.

    Page(Html([Head(Title(Text('title'))),
    Body(Ol(Li(Text('foo'))))])).is_valid() returns True.

    Run as many tests as necessary. You MUST challenge the work turned-in by
    the student and test it as exhaustively as possible.

    Page(Html([Head(Title(Text('title'))), Body()])).write_to_file("test.html")
    create a test.html file containing:

<!doctype html>
<html>
<head>
<title>
title
</title>
</head>
<body></body>
</html>

The exercise is considered invalid if one of the requirements is not
perfectly met.